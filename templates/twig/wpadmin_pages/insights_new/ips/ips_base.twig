
{% block section_table %}
	<div class="row insights_widget" id="SectionTableIpsWhite">
	{% block section_form_addip %}
		<div class="col-12">
			<form class="form-inline" id="NewIp" action="#" method="post">
				{% for name,val in ajax.add_ip_white %}
					<input type="hidden" name="{{ name }}" value="{{ val }}" />
				{% endfor %}
				<label class="sr-only" for="IpAddress">IpAddress</label>
				<div class="input-group w-100">
					<div class="input-group-prepend">
						<div class="input-group-text" style="border-radius: 0">New IP:</div>
					</div>
					<input type="text" class="form-control" id="IpAddress" name="ip"
						   placeholder="123.234.123.234"/>
					<input type="text" class="form-control" id="Label" name="label"
						   placeholder="My Label"/>
					<div class="input-group-append">
						<button type="submit" class="btn btn-info" style="border-radius: 0;" name="subbutt"
						>Add &darr;</button>
					</div>
				</div>
			</form>
		</div>
	{% endblock %}
	<div class="col-12">
		<div class="icwpAjaxTableContainer" data-list="MW"></div>
	</div>
</div>
{% endblock %}

{% block section_table_js %}
	<script>

	var iCWP_WPSF_TableIps = new function () {

		var bRequestCurrentlyRunning = false;
		var $oSection = jQuery( '#SectionTableIpsWhite' );

		/**
		 */
		var loadTable = function () {
			sendTableRequest( jQuery( 'div[class="icwpAjaxTableContainer"]', $oSection ), {} );
		};

		/**
		 */
		var refreshTable = function ( event ) {
			event.preventDefault();

			var $oThis = jQuery( event.currentTarget );
			var $oMainContainer = $oThis.closest( 'div[class="icwpAjaxTableContainer"]', $oSection );

			// var $oForm = jQuery( 'form#AuditFilter' );

			var query = this.search.substring( 1 );
			var aTableRequestParams = {
				paged: extractQueryVars( query, 'paged' ) || 1,
				order: extractQueryVars( query, 'order' ) || 'desc',
				orderby: extractQueryVars( query, 'orderby' ) || 'created_at',
				tableaction: $oThis.data( 'tableaction' )
				// filters: $oForm.serialize()
			};

			sendTableRequest( $oMainContainer, aTableRequestParams );
		};

		var sendTableRequest = function ( $oMainContainer, aTableRequestParams ) {
			if ( bRequestCurrentlyRunning ) {
				return false;
			}
			bRequestCurrentlyRunning = true;
			aTableRequestParams[ 'fList' ] = $oMainContainer.data( 'list' );
			iCWP_WPSF_BodyOverlay.show();

			var requestData = {{ ajax.render_table|raw }};

			jQuery.post( ajaxurl, jQuery.extend( aTableRequestParams, requestData ),
				function ( oResponse ) {
					$oMainContainer.html( oResponse.data.html )
				}
			).always(
				function () {
					resetHandlers();
					bRequestCurrentlyRunning = false;
					iCWP_WPSF_BodyOverlay.hide();
				}
			);
		};

		var extractQueryVars = function ( query, variable ) {
			var vars = query.split( "&" );
			for ( var i = 0; i < vars.length; i++ ) {
				var pair = vars[ i ].split( "=" );
				if ( pair[ 0 ] === variable ) {
					return pair[ 1 ];
				}
			}
			return false;
		};

		var cleanHandlers = function () {
			jQuery( document ).off( "click", 'a.tableActionRefresh' );
		};

		var resetHandlers = function () {
			cleanHandlers();
			setHandlers();
		};

		var setHandlers = function () {
			jQuery( document ).on( "click", 'a.tableActionRefresh', refreshTable );
			jQuery( document ).on( 'click', '.tablenav-pages a, .manage-column.sortable a, .manage-column.sorted a', refreshTable );

			var timer;
			var delay = 500;
			jQuery( document ).on( 'keyup', 'input[name=paged]', function ( event ) {
				// If user hit enter, we don't want to submit the form
				// We don't preventDefault() for all keys because it would
				// also prevent to get the page number!
				if ( 13 === event.which )
					event.preventDefault();

				// This time we fetch the variables in inputs
				var $oThis = jQuery( event.currentTarget );
				var $oMainContainer = $oThis.closest( 'div[class="icwpAjaxTableContainer"]', $oSection );
				var aTableRequestParams = {
					paged: parseInt( jQuery( 'input[name=paged]', $oMainContainer ).val() ) || '1',
					order: jQuery( 'input[name=order]', $oMainContainer ).val() || 'desc',
					orderby: jQuery( 'input[name=orderby]', $oMainContainer ).val() || 'created_at'
				};
				// Now the timer comes to use: we wait half a second after
				// the user stopped typing to actually send the call. If
				// we don't, the keyup event will trigger instantly and
				// thus may cause duplicate calls before sending the intended
				// value
				window.clearTimeout( timer );
				timer = window.setTimeout( function () {
					sendTableRequest( $oMainContainer, aTableRequestParams );
				}, delay );
			} );
		};

		/**
		 */
		var submitForm = function ( event ) {
			iCWP_WPSF_BodyOverlay.show();
			event.preventDefault();

			jQuery.post( ajaxurl, jQuery( this ).serialize(),
				function ( oResponse ) {
					if ( oResponse.success ) {
						loadTable(); //  this will remove the overlay
						iCWP_WPSF_Growl.showMessage( oResponse.data.message, oResponse.success );
					}
					else {
						var sMessage = 'Communications error with site.';
						if ( oResponse.data.message !== undefined ) {
							sMessage = oResponse.data.message;
						}
						alert( sMessage );
						iCWP_WPSF_BodyOverlay.hide();
					}
				}
			).always( function () {
				}
			);
		};

		this.initialise = function () {
			jQuery( document ).ready( function () {
				loadTable();
			} );
			jQuery( document ).ready( setHandlers );
			jQuery( document ).on( "submit", "form#NewIp", submitForm );
		};
	}();

	iCWP_WPSF_TableIps.initialise();

</script>
{% endblock %}