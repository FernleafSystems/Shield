<?php

if ( !class_exists( 'ICWP_WPSF_Processor_LoginProtect_GoogleAuthenticator', false ) ):

require_once( dirname(__FILE__).DIRECTORY_SEPARATOR.'base_wpsf.php' );

class ICWP_WPSF_Processor_LoginProtect_GoogleAuthenticator extends ICWP_WPSF_Processor_BaseWpsf {

	/**
	 */
	public function run() {
		// after GASP but before email-based two-factor auth
		add_filter( 'wp_authenticate_user', array( $this, 'checkLoginForGoogleAuthenticator_Filter' ), 23, 2 );

		add_action( 'personal_options_update', array( $this, 'handleUserProfileSubmit' ) );
		add_action( 'show_user_profile', array( $this, 'addGoogleAuthenticatorOptionsToUserProfile' ) );

		if ( $this->getController()->getIsValidAdminArea( true ) ) {
			add_action( 'edit_user_profile_update', array( $this, 'handleEditOtherUserProfileSubmit' ) );
			add_action( 'edit_user_profile', array( $this, 'addGoogleAuthenticatorOptionsToUserProfile' ) );
		}

		// Add field to login Form
		add_action( 'login_form', array( $this, 'printGoogleAuthenticatorLoginField' ) );
	}

	/**
	 * This MUST only ever be hooked into when the User is looking at their OWN profile, so we can use "current user"
	 * functions.  Otherwise we need to be careful of mixing up users.
	 * @param WP_User $oUser
	 */
	public function addGoogleAuthenticatorOptionsToUserProfile( $oUser ) {
		/** @var ICWP_WPSF_FeatureHandler_LoginProtect $oFO */
		$oFO = $this->getFeatureOptions();
		$aData = array(
			'user_has_google_authenticator_validated' => $oFO->getHasGaValidated( $oUser ),
			'user_google_authenticator_secret' => $oFO->getGaSecret( $oUser ),
			'is_my_user_profile' => ( $oUser->ID == $this->loadWpUsersProcessor()->getCurrentWpUserId() ),
			'i_am_valid_admin' => $this->getController()->getHasPermissionToManage(),
			'user_to_edit_is_admin' => $this->loadWpUsersProcessor()->isUserAdmin( $oUser ),
			'strings' => array(
				'description_otp_code' => _wpsf__( 'Provide the current code generated by your Google Authenticator app.' ),
				'description_otp_code_ext' => _wpsf__( 'To reset this QR Code enter fake data here.' ),
				'description_chart_url' => _wpsf__( 'Use your Google Authenticator app to scan this QR code and enter the one time password below.' ),
				'description_ga_secret' => _wpsf__( 'If you have a problem with scanning the QR code enter this code manually into the app.' ),
				'description_remove_google_authenticator' => _wpsf__( 'Check the box to remove Google Authenticator login authentication.' ),
				'label_check_to_remove' => _wpsf__( 'Remove Google Authenticator' ),
				'label_enter_code' => _wpsf__( 'Google Authenticator Code' ),
				'label_ga_secret' => _wpsf__( 'Manual Code' ),
				'label_scan_qr_code' => _wpsf__( 'Scan This QR Code' ),
				'title' => _wpsf__( 'Google Authenticator' ),
				'sorry_cant_add_to_other_user' => _wpsf__( "Sorry, Google Authenticator may not be added to another user's account." ),
				'sorry_cant_remove_from_to_other_admins' => _wpsf__( "Sorry, Google Authenticator may only be removed from another user's account by a Shield Security Administrator." ),
				'provided_by' => sprintf( _wpsf__( 'Provided by %s' ), $this->getController()->getHumanName() )
			)
		);

		if ( !$aData['user_has_google_authenticator_validated'] ) {
			$sChartUrl = $this->loadGoogleAuthenticatorProcessor()->getGoogleQrChartUrl(
				$aData['user_google_authenticator_secret'],
				$oUser->get('user_login').'@'.$this->loadWpFunctionsProcessor()->getHomeUrl( true )
			);
			$aData[ 'chart_url' ] = $sChartUrl;
		}

		echo $this->getFeatureOptions()->renderTemplate( 'snippets/user_profile_googleauthenticator.php', $aData );
	}

	protected function processGaProfileSubmit( $oSavingUser ) {

	}

	/**
	 * @param WP_User $oSavingUser
	 */
	protected function processGaAccountRemoval( $oSavingUser ) {
		/** @var ICWP_WPSF_FeatureHandler_LoginProtect $oFO */
		$oFO = $this->getFeatureOptions();
		$oWpUsers = $this->loadWpUsersProcessor();
		$oWpUsers->updateUserMeta( $oFO->prefixOptionKey( 'ga_validated' ), 'N', $oSavingUser->ID );
		$oWpUsers->updateUserMeta( $oFO->prefixOptionKey( 'ga_secret' ), '', $oSavingUser->ID );
	}

	/**
	 * @param WP_User $oUser
	 * @param string  $sGaOtpCode
	 * @return bool
	 */
	protected function processUserGaOtp( $oUser, $sGaOtpCode ) {
		/** @var ICWP_WPSF_FeatureHandler_LoginProtect $oFO */
		$oFO = $this->getFeatureOptions();
		$bValidOtp = false;
		if ( !empty( $sGaOtpCode ) && preg_match( '#^[0-9]{6}$#', $sGaOtpCode ) ) {
			$bValidOtp = $this->loadGoogleAuthenticatorProcessor()
							  ->verifyOtp( $oFO->getGaSecret( $oUser ), $sGaOtpCode );

		}
		return $bValidOtp;
	}

	/**
	 * The only thing we can do is REMOVE Google Authenticator from an account that is not our own
	 * But, only admins can do this.  If Security Admin feature is enabled, then only they can do it.
	 *
	 * @param int $nSavingUserId
	 */
	public function handleEditOtherUserProfileSubmit( $nSavingUserId ) {
		/** @var ICWP_WPSF_FeatureHandler_LoginProtect $oFO */
		$oFO = $this->getFeatureOptions();
		$oDp = $this->loadDataProcessor();

		// Can only edit other users if you're admin/security-admin
		if ( $this->getController()->getHasPermissionToManage() ) {
			$oWpUsers = $this->loadWpUsersProcessor();
			$oSavingUser = $oWpUsers->getUserById( $nSavingUserId );

			$sShieldTurnOff = $oDp->FetchPost( 'shield_turn_off_google_authenticator' );
			if ( !empty( $sShieldTurnOff ) && $sShieldTurnOff == 'Y' ) {

				$bPermissionToRemoveGa = true;
				// if the current user has Google Authenticator on THEIR account, process their OTP.
				$oCurrentUser = $oWpUsers->getCurrentWpUser();
				if ( $oFO->getHasGaValidated( $oCurrentUser ) ) {
					$bPermissionToRemoveGa = $this->processUserGaOtp(
						$oCurrentUser,
						$oDp->FetchPost( 'shield_ga_otp_code' )
					);
				}

				if ( $bPermissionToRemoveGa ) {
					$this->processGaAccountRemoval( $oSavingUser );
					$this->loadAdminNoticesProcessor()
						 ->addFlashMessage(
							 _wpsf__( 'Google Authenticator was successfully removed from the account.' )
						 );
				}
				else {
					$this->loadAdminNoticesProcessor()
						 ->addFlashErrorMessage(
							 _wpsf__( 'Google Authenticator could not be removed from the account - ensure your code is correct.' )
						 );
				}
			}
		}
		else {
			// DO NOTHING EVER
		}
	}

	/**
	 * This MUST only ever be hooked into when the User is looking at their OWN profile,
	 * so we can use "current user" functions.  Otherwise we need to be careful of mixing up users.
	 *
	 * @param int $nSavingUserId
	 */
	public function handleUserProfileSubmit( $nSavingUserId ) {
		/** @var ICWP_WPSF_FeatureHandler_LoginProtect $oFO */
		$oFO = $this->getFeatureOptions();
		$oDp = $this->loadDataProcessor();
		$oWpUsers = $this->loadWpUsersProcessor();
		$oWpNotices = $this->loadAdminNoticesProcessor();

		// If it's your own account, you CANT do anything without your OTP.
		$sGaOtpCode = $oDp->FetchPost( 'shield_ga_otp_code' );
		if ( empty( $sGaOtpCode ) ) {
			return;
		}

		$oSavingUser = $oWpUsers->getUserById( $nSavingUserId );

		$bCorrectGaOtp = $this->processUserGaOtp( $oSavingUser, $sGaOtpCode );

		if ( $bCorrectGaOtp ) {

			// Trying to validate a new QR for my own profile
			if ( !$oFO->getHasGaValidated( $oSavingUser ) ) {
				$oWpUsers->updateUserMeta( $oFO->prefixOptionKey( 'ga_validated' ), 'Y', $nSavingUserId );
				$oWpNotices->addFlashMessage( _wpsf__( 'Google Authenticator was successfully added to your account.' ) );
			}
			else {
				$sShieldTurnOff = $oDp->FetchPost( 'shield_turn_off_google_authenticator' );
				if ( !empty( $sShieldTurnOff ) && $sShieldTurnOff == 'Y' ) {
					$this->processGaAccountRemoval( $oSavingUser );
					$this->loadAdminNoticesProcessor()
						 ->addFlashMessage(
							 _wpsf__( 'Google Authenticator was successfully removed from the account.' )
						 );
				}
			}
		}
		else { // Incorrect OTP:
			if ( !$oFO->getHasGaValidated( $oSavingUser ) ) {
				$oFO->resetGaSecret( $oSavingUser );
			}
			$oWpNotices->addFlashErrorMessage( _wpsf__( 'One Time Password (OTP) was not valid.' ).' '._wpsf__( 'Please try again.' ) );
		}
	}

	/**
	 * @param WP_User $oUser
	 * @return WP_Error
	 */
	public function checkLoginForGoogleAuthenticator_Filter( $oUser ) {
		/** @var ICWP_WPSF_FeatureHandler_LoginProtect $oFO */
		$oFO = $this->getFeatureOptions();
		$oDp = $this->loadDataProcessor();

		$oError = new WP_Error();

		$bIsUser = is_object( $oUser ) && ( $oUser instanceof WP_User );
		if ( $bIsUser && $oFO->getHasGaValidated( $oUser ) ) {
			$sGaOtp = $oDp->FetchPost( $this->getLoginFormParameter(), '' );
			if ( empty( $sGaOtp ) ) {
				$oError->add( 'shield_google_authenticator_empty', _wpsf__( 'Whoops.' )
					.' '. _wpsf__( 'Did we forget to use the Google Authenticator?' ) );
				$oUser = $oError;
			}
			else {
				$sGaOtp = preg_replace( '/[^0-9]/', '', $sGaOtp );
				if ( empty( $sGaOtp ) || !$this->loadGoogleAuthenticatorProcessor()->verifyOtp( $oFO->getGaSecret( $oUser, false ), $sGaOtp ) ) {
					$oError->add( 'shield_google_authenticator_empty', _wpsf__( 'Oh dear.' )
						.' '. _wpsf__( 'Google Authenticator Code Failed.' ) );
					$oUser = $oError;
				}
			}

			if ( is_wp_error( $oUser ) ) {
				$this->doStatIncrement( 'login.googleauthenticator.fail' );
			}
			else {
				$this->doStatIncrement( 'login.googleauthenticator.verified' );
			}
		}
		return $oUser;
	}

	/**
	 */
	public function printGoogleAuthenticatorLoginField() {
		$sHtml =
			'<p class="shield-google-authenticator-otp">
				<label for="_%s">%s<span class="shield-ga-help-link"> [%s]</span><br /><span class="shield-ga-inline-help">(%s)</span><br />
					<input type="text" name="%s" id="_%s" class="input" value="" autocomplete="off" maxlength="6"
					onkeyup="this.value=this.value.replace(/[^\d]/g,\'\')" />
				</label>
			</p>
		';
		$sParam = $this->getLoginFormParameter();
		echo sprintf( $sHtml,
			$sParam,
			_wpsf__( 'Google Authenticator Code' ),
			'<a href="http://icwp.io/wpsf42" target="_blank" style="font-weight: bolder; margin:0 3px">&#63;</a>',
			_wpsf__( 'Use only if setup on your account' ),
			$sParam,
			$sParam
		);
	}

	/**
	 * @return string
	 */
	protected function getLoginFormParameter() {
		return $this->getFeatureOptions()->prefixOptionKey( 'ga_otp' );
	}
}
endif;